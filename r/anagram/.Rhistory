3 + 6 * 1/200
0.6^2 + 0.3^2 + 0.1^2
0.7^2 + 3 * 0.1^2
1.5/6
var(45,25,56)
var(45,25,56)
var(c(45,25,56))
mean(c(45,25,56))
(45-42)^2+(25-42)^2+(56-42)^@
(45-42)^2+(25-42)^2+(56-42)^2
494/3
(30-12)*12+78*4
x = 415
y = 750
n = 10
blotto <-function(x,y,n){
ytroops = floor(y / n)
maxpossiblefrontswon = floor (x / ytroops)
return(maxpossiblefrontswon)
}
blotto(x,y,3)
blotto <-function(x,y,n){
ytroops = floor(y / n)
maxpossiblefrontswon = floor (x / ytroops)
print(ytroops)
print(maxpossiblefrontswon)
}
blotto(x,y,3)
blotto(x,y,4)
blotto(x,y,7)
blotto(x,y,11)
6*58
6*68
11*68
(310-288^2 + (310-249)^2 + (310-368)^2
(310-288)^2 + (310-249)^2 + (310-368)^2
7569^0.5
288+249+368
(310-905/3)^2
(145-105)^2 + (145-125)^2 + (145-190)^2
105+125+190
420/3
18*(40-18)+82*6
install.packages
install.packages("caret")
library(caret)
versionInfo()
version()
sessionInfo()
library(boot)
cost <- function(r, pi = 0) mean(abs(r-pi) > 0.5)
lr1 <- glm(lineupacc~confidenceresp, family="binomial", data=data)
cost
cost(2)
cost(1:10)
cost(1:100)
cost(1:100/100)
cost(1:100/50)
boxTidwell
library(car)
boxTidwell
cars
boxTidwell(speed~dist, cars)
boxTidwell(speed~dist, data = cars)
x = rbind(cars, c(0,0))
boxTidwell(speed~dist, data = x)
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
range(0:10)
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Project.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Application.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Application.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Application.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Application.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Application.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Application.py\"")
x = system("python \"Courses/Coursera/Algorithmic Thinking/x.py\"")
x
source('~/Courses/Coursera/Algorithmic Thinking/TestX.R')
source('~/Courses/Coursera/Algorithmic Thinking/TestX.R')
x
log(1, 10)
log(0, 10)
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Application_Q3.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Application_Q3.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Application_Q3.py\"")
system("python \"Courses/Coursera/Algorithmic Thinking/Module1_Application_Q3.py\"")
log(200/125.5)/0.12
125.5*exp(0.12*3.88)
log ( 1 /58)
log ( 1 /58)/-0.4
data <- read.csv("C://Users/Jon/Downloads/data.csv")
data
plot(data)
data <- read.csv("C://Users/Jon/Downloads/data.csv")
plot(data)
data_min <- read.csv("C://Users/Jon/Downloads/data_min.csv")
plot(data)
plot(data_min)
data_min
str(data_min)
str(as.time(data_min$Time))
str(as.Date(data_min$Time))
as.Date.POSIXct(data_min$Time)
install.packages("rStrava")
install.packages('devtools')
devtools::install_github('fawda123/rStrava')
library(devtools)
library(devtools)
library("devtools", lib.loc="~/R/win-library/3.1")
detach("package:devtools", unload=TRUE)
library("devtools", lib.loc="~/R/win-library/3.1")
R.Version()
library("devtools", lib.loc="~/R/win-library/3.1")
install.packages('devtools')
devtools::install_github('fawda123/rStrava')
athl_fun(3218388, trace = FALSE)
library(rStrava)
athl_fun(3218388, trace = FALSE)
data <- athl_fun(3218388, trace = FALSE)
data$`3218388`$monthly
plot(data$`3218388`$monthly)
app_name <- 'rStrava' # chosen by user
app_client_id  <- '11835' # an integer, assigned by Strava
app_secret <- 'e2b46058e53dbaa530f43b91423d086d11f50c25' # an alphanumeric secret, assigned by Strava
stoken <- httr::config(token = strava_oauth(app_name, app_client_id, app_secret))
install.packages("httpuv")
stoken <- httr::config(token = strava_oauth(app_name, app_client_id, app_secret))
myinfo <- get_athlete(stoken, id = '2837007')
myinfo
myinfo <- get_athlete(stoken, id = '3218388')
head(myinfo)
help.search('token', package = 'rStrava')
data <- athlind_fun(3218388, trace = FALSE)
data <- athlind_fun(3218388)
data
get_activity(590340975, stoken)
parkrun <- get_activity(590340975, stoken)
str(parkrun)
install.packages("RSocrata")
library(refactor)
cut(1:100, breaks = 3, right = T, breaks_mode = "pretty")
cut(1:10, breaks = 3, right = T, breaks_mode = "pretty")
cut(1:10, breaks = 5, right = T, breaks_mode = "pretty")
cut(1:10, breaks = 2, right = T, breaks_mode = "pretty")
cut(1:10, breaks = 3, right = T, breaks_mode = "pretty")
cut(1:10, breaks = 4, right = T, breaks_mode = "pretty")
cut(1:10, breaks = 5, right = T, breaks_mode = "pretty")
cut(1:10, breaks = 6, right = T, breaks_mode = "pretty")
cut(1:10, breaks = 2, right = T, breaks_mode = "pretty")
cut(1:10, breaks = 1, right = T, breaks_mode = "pretty")
cut(1:10, breaks = 2, right = T, breaks_mode = "pretty")
cut(1:10, breaks = 5, right = T, breaks_mode = "pretty")
cut(1:10, breaks = 10, right = T, breaks_mode = "pretty")
?pretty
cut(1:10, breaks = 3, right = T, breaks_mode = "pretty")
library(swirlify)
library(swirl)
set_lesson()
pack_course()
install_course()
swirl()
library(swirlify)
library(swirl)
set_lesson()
pack_course()
install_course()
uninstall_all_courses()
install_course()
swirl()
#devtools::install_github("rich-iannone/DiagrammeR")
library("DiagrammeR")
# Create a random graph with 2 nodes, an edge,
# and display the graph
create_random_graph(n = 2, m = 1) %>% render_graph()
create_random_graph(n = 15, m = 30) %>% render_graph()
create_random_graph(n = 15, m = 200) %>% render_graph()
create_random_graph(n = 15, m = 105) %>% render_graph()
# Create a random graph with 512 nodes and no edges;
# output a data frame with node and edge counts
create_random_graph(n = 512, m = 0) %>%
{
node_count <- get_node_df(.) %>% nrow()
edge_count <- get_edge_df(.) %>% nrow()
data.frame(nodes = node_count, edges = edge_count)
}
create_random_graph(n = 4, m = 4, set_seed = 30) %>% render_graph()
create_random_graph(n = 15, m = 22, directed = TRUE) %>% render_graph()
unload("jsonlite")
detach("jsonlite")
source('C:/Users/Jon/exercism/r/anagram/test_anagram.R')
setwd("C:/Users/Jon/exercism/r/anagram")
source('C:/Users/Jon/exercism/r/anagram/test_anagram.R')
subject = "listen"
candidates = c("enlists", "google",
"inlets", "banana")
strsplit(subject, "")
subject_letters <- strsplit(subject, "")[[1]]
subject_letters <- strsplit(subject, "")[[1]]
is_anagram <- function(word) {
anagram <- TRUE
for (x in subject_letters) {
if (x %notin% word){
anagram <- FALSE
}
}
return(anagram)
}
matches <- lapply(candidates, FUN = is_anagram)
subject_letters <- strsplit(subject, "")[[1]]
is_anagram <- function(word) {
anagram <- TRUE
for (x in subject_letters) {
if (!(x %in% word)){
anagram <- FALSE
}
}
return(anagram)
}
matches <- lapply(candidates, FUN = is_anagram)
matches
matches
subject
subject_letters
is_anagram("enlists")
is_anagram("inlets")
is_anagram <- function(word) {
anagram <- TRUE
for (x in subject_letters) {
if (!(x %in% word)){
cat(x)
anagram <- FALSE
}
}
return(anagram)
}
is_anagram("inlets")
is_anagram <- function(word) {
anagram <- TRUE
for (x in subject_letters) {
# if (!(x %in% word)){
cat(x)
# anagram <- FALSE
# }
}
return(anagram)
}
is_anagram("inlets")
is_anagram <- function(word) {
anagram <- TRUE
for (x in subject_letters) {
if (!(x %in% word)){
cat(x)
anagram <- FALSE
}
}
return(anagram)
}
is_anagram("inlets")
subject_letters <- strsplit(subject, "")[[1]]
is_anagram <- function(word) {
word_letters <- strsplit(word, "")[[1]]
anagram <- TRUE
for (x in subject_letters) {
if (!(x %in% word_letters)){
anagram <- FALSE
}
if (length(word_letters) != length(subject_letters)){
anagram <- FALSE
}
}
return(anagram)
}
matches <- lapply(candidates, FUN = is_anagram)
matches
candidates[matches]
matches <- sapply(candidates, FUN = is_anagram)
candidates[matches]
source('C:/Users/Jon/exercism/r/anagram/test_anagram.R')
c(candidates[matches])
c(candidates[NULL])
c(candidates[rep(FALSE, 4)])
anagram <- function(subject,candidates) {
subject_letters <- strsplit(subject, "")[[1]]
is_anagram <- function(word) {
word_letters <- strsplit(word, "")[[1]]
anagram <- TRUE
for (x in subject_letters) {
if (!(x %in% word_letters)){
anagram <- FALSE
}
if (length(word_letters) != length(subject_letters)){
anagram <- FALSE
}
}
return(anagram)
}
matches <- sapply(candidates, FUN = is_anagram)
c(candidates[matches])
}
source('C:/Users/Jon/exercism/r/anagram/anagram.R')
source('C:/Users/Jon/exercism/r/anagram/test_anagram.R')
source('C:/Users/Jon/exercism/r/anagram/test_anagram.R')
str(anagram(subjects, candidates))
str(anagram(subject, candidates))
class(anagram(subject, candidates))
expect_equal(anagram(subject, candidates), c("inlets"))
